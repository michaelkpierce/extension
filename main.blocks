<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="Y)I=/`:6@d94Dz,ctXD6" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="m:0o%WIr7YmKkTPX~Jq#" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace PCA9685 {" line1="    let _DEBUG: boolean = false" line2="    const debug = (msg: string) =&gt; {" line3="        if (_DEBUG === true) {" line4="            //serial.writeLine(msg)" line5="        }" line6="    }" line7="" line8="    const MIN_CHIP_ADDRESS = 0x40" line9="    const MAX_CHIP_ADDRESS = MIN_CHIP_ADDRESS + 62" line10="    const chipResolution = 4096;" line11="    const PrescaleReg = 0xFE //the prescale register address" line12="    const modeRegister1 = 0x00 // MODE1" line13="    const modeRegister1Default = 0x01" line14="    const modeRegister2 = 0x01 // MODE2" line15="    const modeRegister2Default = 0x04" line16="    const sleep = modeRegister1Default | 0x10; // Set sleep bit to 1" line17="    const wake = modeRegister1Default &amp; 0xEF; // Set sleep bit to 0" line18="    const restart = wake | 0x80; // Set restart bit to 1" line19="    const allChannelsOnStepLowByte = 0xFA // ALL_LED_ON_L" line20="    const allChannelsOnStepHighByte = 0xFB // ALL_LED_ON_H" line21="    const allChannelsOffStepLowByte = 0xFC // ALL_LED_OFF_L" line22="    const allChannelsOffStepHighByte = 0xFD // ALL_LED_OFF_H" line23="    const PinRegDistance = 4" line24="    const channel0OnStepLowByte = 0x06 // LED0_ON_L" line25="    const channel0OnStepHighByte = 0x07 // LED0_ON_H" line26="    const channel0OffStepLowByte = 0x08 // LED0_OFF_L" line27="    const channel0OffStepHighByte = 0x09 // LED0_OFF_H" line28="" line29="    const hexChars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f']" line30="" line31="    /*" line32="        export enum HexValue {" line33="            h0 = 0," line34="            h1 = 1," line35="            h2 = 2," line36="            h3 = 3," line37="            h4 = 4," line38="            h5 = 5," line39="            h6 = 6," line40="            h7 = 7," line41="            h8 = 8," line42="            h9 = 9," line43="            hA = 10," line44="            hB = 11," line45="            hC = 12," line46="            hD = 13," line47="            hE = 14," line48="            hF = 15" line49="        }" line50="" line51="        export enum ChipAddress {" line52="            hex_0x40 = 0x40," line53="            hex_0x41 = 0x41," line54="            hex_0x42 = 0x42," line55="            hex_0x43 = 0x43," line56="            hex_0x44 = 0x44," line57="            hex_0x45 = 0x45," line58="            hex_0x46 = 0x46," line59="            hex_0x47 = 0x47," line60="            hex_0x48 = 0x48," line61="            hex_0x49 = 0x49," line62="            hex_0x4A = 0x4A," line63="            hex_0x4B = 0x4B," line64="            hex_0x4C = 0x4C," line65="            hex_0x4D = 0x4D," line66="            hex_0x4E = 0x4E," line67="            hex_0x4F = 0x4F," line68="            hex_0x50 = 0x50," line69="            hex_0x51 = 0x51," line70="            hex_0x52 = 0x52," line71="            hex_0x53 = 0x53," line72="            hex_0x54 = 0x54," line73="            hex_0x55 = 0x55," line74="            hex_0x56 = 0x56," line75="            hex_0x57 = 0x57," line76="            hex_0x58 = 0x58," line77="            hex_0x59 = 0x59," line78="            hex_0x5A = 0x5A," line79="            hex_0x5B = 0x5B," line80="            hex_0x5C = 0x5C," line81="            hex_0x5D = 0x5D," line82="            hex_0x5E = 0x5E," line83="            hex_0x5F = 0x5F," line84="            hex_0x60 = 0x60," line85="            hex_0x61 = 0x61," line86="            hex_0x62 = 0x62," line87="            hex_0x63 = 0x63," line88="            hex_0x64 = 0x64," line89="            hex_0x65 = 0x65," line90="            hex_0x66 = 0x66," line91="            hex_0x67 = 0x67," line92="            hex_0x68 = 0x68," line93="            hex_0x69 = 0x69," line94="            hex_0x6A = 0x6A," line95="            hex_0x6B = 0x6B," line96="            hex_0x6C = 0x6C," line97="            hex_0x6D = 0x6D," line98="            hex_0x6E = 0x6E," line99="            hex_0x6F = 0x6F," line100="            hex_0x70 = 0x70," line101="            hex_0x71 = 0x71," line102="            hex_0x72 = 0x72," line103="            hex_0x73 = 0x73," line104="            hex_0x74 = 0x74," line105="            hex_0x75 = 0x75," line106="            hex_0x76 = 0x76," line107="            hex_0x77 = 0x77," line108="            hex_0x78 = 0x78," line109="            hex_0x79 = 0x79," line110="            hex_0x7A = 0x7A," line111="            hex_0x7B = 0x7B," line112="            hex_0x7C = 0x7C," line113="            hex_0x7D = 0x7D," line114="        }" line115="    */" line116="" line117="    export enum PinNum {" line118="        Pin0 = 0," line119="        Pin1 = 1," line120="        Pin2 = 2," line121="        Pin3 = 3," line122="        Pin4 = 4," line123="        Pin5 = 5," line124="        Pin6 = 6," line125="        Pin7 = 7," line126="        Pin8 = 8," line127="        Pin9 = 9," line128="        Pin10 = 10," line129="        Pin11 = 11," line130="        Pin12 = 12," line131="        Pin13 = 13," line132="        Pin14 = 14," line133="        Pin15 = 15," line134="    }" line135="" line136="    export enum ServoNum {" line137="        Servo1 = 1," line138="        Servo2 = 2," line139="        Servo3 = 3," line140="        Servo4 = 4," line141="        Servo5 = 5," line142="        Servo6 = 6," line143="        Servo7 = 7," line144="        Servo8 = 8," line145="        Servo9 = 9," line146="        Servo10 = 10," line147="        Servo11 = 11," line148="        Servo12 = 12," line149="        Servo13 = 13," line150="        Servo14 = 14," line151="        Servo15 = 15," line152="        Servo16 = 16," line153="    }" line154="" line155="    export enum LEDNum {" line156="        LED1 = 1," line157="        LED2 = 2," line158="        LED3 = 3," line159="        LED4 = 4," line160="        LED5 = 5," line161="        LED6 = 6," line162="        LED7 = 7," line163="        LED8 = 8," line164="        LED9 = 9," line165="        LED10 = 10," line166="        LED11 = 11," line167="        LED12 = 12," line168="        LED13 = 13," line169="        LED14 = 14," line170="        LED15 = 15," line171="        LED16 = 16," line172="    }" line173="" line174="    export class ServoConfigObject {" line175="        id: number;" line176="        pinNumber: number;" line177="        minOffset: number;" line178="        midOffset: number;" line179="        maxOffset: number;" line180="        position: number;" line181="    }" line182="" line183="    export const DefaultServoConfig = new ServoConfigObject();" line184="    DefaultServoConfig.pinNumber = -1" line185="    DefaultServoConfig.minOffset = 5" line186="    DefaultServoConfig.midOffset = 15" line187="    DefaultServoConfig.maxOffset = 25" line188="    DefaultServoConfig.position = 90" line189="" line190="    export class ServoConfig {" line191="        id: number;" line192="        pinNumber: number;" line193="        minOffset: number;" line194="        midOffset: number;" line195="        maxOffset: number;" line196="        position: number;" line197="        constructor(id: number, config: ServoConfigObject) {" line198="            this.id = id" line199="            this.init(config)" line200="        }" line201="" line202="        init(config: ServoConfigObject) {" line203="            this.pinNumber = config.pinNumber &gt; -1 ? config.pinNumber : this.id - 1" line204="            this.setOffsetsFromFreq(config.minOffset, config.maxOffset, config.midOffset)" line205="            this.position = -1" line206="        }" line207="" line208="        debug() {" line209="            const params = this.config()" line210="" line211="            for (let j = 0; j &lt; params.length; j = j + 2) {" line212="                debug(`Servo[${this.id}].${params[j]}: ${params[j + 1]}`)" line213="            }" line214="        }" line215="" line216="        setOffsetsFromFreq(startFreq: number, stopFreq: number, midFreq: number = -1): void {" line217="            this.minOffset = startFreq // calcFreqOffset(startFreq)" line218="            this.maxOffset = stopFreq // calcFreqOffset(stopFreq)" line219="            this.midOffset = midFreq &gt; -1 ? midFreq : ((stopFreq - startFreq) / 2) + startFreq" line220="        }" line221="" line222="        config(): string[] {" line223="            return [" line224="                'id', this.id.toString()," line225="                'pinNumber', this.pinNumber.toString()," line226="                'minOffset', this.minOffset.toString()," line227="                'maxOffset', this.maxOffset.toString()," line228="                'position', this.position.toString()," line229="            ]" line230="        }" line231="    }" line232="" line233="    export class ChipConfig {" line234="        address: number;" line235="        servos: ServoConfig[];" line236="        freq: number;" line237="        constructor(address: number = 0x40, freq: number = 50) {" line238="            this.address = address" line239="            this.servos = [" line240="                new ServoConfig(1, DefaultServoConfig)," line241="                new ServoConfig(2, DefaultServoConfig)," line242="                new ServoConfig(3, DefaultServoConfig)," line243="                new ServoConfig(4, DefaultServoConfig)," line244="                new ServoConfig(5, DefaultServoConfig)," line245="                new ServoConfig(6, DefaultServoConfig)," line246="                new ServoConfig(7, DefaultServoConfig)," line247="                new ServoConfig(8, DefaultServoConfig)," line248="                new ServoConfig(9, DefaultServoConfig)," line249="                new ServoConfig(10, DefaultServoConfig)," line250="                new ServoConfig(11, DefaultServoConfig)," line251="                new ServoConfig(12, DefaultServoConfig)," line252="                new ServoConfig(13, DefaultServoConfig)," line253="                new ServoConfig(14, DefaultServoConfig)," line254="                new ServoConfig(15, DefaultServoConfig)," line255="                new ServoConfig(16, DefaultServoConfig)" line256="            ]" line257="            this.freq = freq" line258="            init(address, freq)" line259="        }" line260="    }" line261="" line262="    export const chips: ChipConfig[] = []" line263="" line264="    function calcFreqPrescaler(freq: number): number {" line265="        return (25000000 / (freq * chipResolution)) - 1;" line266="    }" line267="" line268="    function stripHexPrefix(str: string): string {" line269="        if (str.length === 2) {" line270="            return str" line271="        }" line272="        if (str.substr(0, 2) === '0x') {" line273="            return str.substr(-2, 2)" line274="        }" line275="        return str" line276="    }" line277="" line278="    function write(chipAddress: number, register: number, value: number): void {" line279="        const buffer = pins.createBuffer(2)" line280="        buffer[0] = register" line281="        buffer[1] = value" line282="        pins.i2cWriteBuffer(chipAddress, buffer, false)" line283="    }" line284="" line285="    export function getChipConfig(address: number): ChipConfig {" line286="        for (let i = 0; i &lt; chips.length; i++) {" line287="            if (chips[i].address === address) {" line288="                debug(`Returning chip ${i}`)" line289="                return chips[i]" line290="            }" line291="        }" line292="        debug(`Creating new chip for address ${address}`)" line293="        const chip = new ChipConfig(address)" line294="        const index = chips.length" line295="        chips.push(chip)" line296="        return chips[index]" line297="    }" line298="" line299="    function calcFreqOffset(freq: number, offset: number) {" line300="        return ((offset * 1000) / (1000 / freq) * chipResolution) / 10000" line301="    }" line302="" line303="    /**" line304="     * Used to set the pulse range (0-4095) of a given pin on the PCA9685" line305="     * @param chipAddress [64-125] The I2C address of your PCA9685; eg: 64" line306="     * @param pinNumber The pin number (0-15) to set the pulse range on" line307="     * @param onStep The range offset (0-4095) to turn the signal on" line308="     * @param offStep The range offset (0-4095) to turn the signal off" line309="     */" line310="    //% block advanced=true" line311="    export function setPinPulseRange(pinNumber: PinNum = 0, onStep: number = 0, offStep: number = 2048, chipAddress: number = 0x40): void {" line312="        pinNumber = Math.max(0, Math.min(15, pinNumber))" line313="        const buffer2 = pins.createBuffer(2)" line314="        const pinOffset = PinRegDistance * pinNumber" line315="        onStep = Math.max(0, Math.min(4095, onStep))" line316="        offStep = Math.max(0, Math.min(4095, offStep))" line317="" line318="        debug(`setPinPulseRange(${pinNumber}, ${onStep}, ${offStep}, ${chipAddress})`)" line319="        debug(`  pinOffset ${pinOffset}`)" line320="" line321="        // Low byte of onStep" line322="        write(chipAddress, pinOffset + channel0OnStepLowByte, onStep &amp; 0xFF)" line323="" line324="        // High byte of onStep" line325="        write(chipAddress, pinOffset + channel0OnStepHighByte, (onStep &gt;&gt; 8) &amp; 0x0F)" line326="" line327="        // Low byte of offStep" line328="        write(chipAddress, pinOffset + channel0OffStepLowByte, offStep &amp; 0xFF)" line329="" line330="        // High byte of offStep" line331="        write(chipAddress, pinOffset + channel0OffStepHighByte, (offStep &gt;&gt; 8) &amp; 0x0F)" line332="    }" line333="" line334="    /**" line335="     * Used to set the duty cycle (0-100) of a given led connected to the PCA9685" line336="     * @param chipAddress [64-125] The I2C address of your PCA9685; eg: 64" line337="     * @param ledNumber The number (1-16) of the LED to set the duty cycle on" line338="     * @param dutyCycle The duty cycle (0-100) to set the LED to" line339="     */" line340="    //% block" line341="    export function setLedDutyCycle(ledNum: LEDNum = 1, dutyCycle: number, chipAddress: number = 0x40): void {" line342="        ledNum = Math.max(1, Math.min(16, ledNum))" line343="        dutyCycle = Math.max(0, Math.min(100, dutyCycle))" line344="        const pwm = (dutyCycle * (chipResolution - 1)) / 100" line345="        debug(`setLedDutyCycle(${ledNum}, ${dutyCycle}, ${chipAddress})`)" line346="        return setPinPulseRange(ledNum - 1, 0, pwm, chipAddress)" line347="    }" line348="" line349="    function degrees180ToPWM(freq: number, degrees: number, offsetStart: number, offsetEnd: number): number {" line350="        // Calculate the offset of the off point in the freq" line351="        offsetEnd = calcFreqOffset(freq, offsetEnd)" line352="        offsetStart = calcFreqOffset(freq, offsetStart)" line353="        const spread: number = offsetEnd - offsetStart" line354="        const calcOffset: number = ((degrees * spread) / 180) + offsetStart" line355="        // Clamp it to the bounds" line356="        return Math.max(offsetStart, Math.min(offsetEnd, calcOffset))" line357="    }" line358="" line359="    /**" line360="     * Used to move the given servo to the specified degrees (0-180) connected to the PCA9685" line361="     * @param chipAddress [64-125] The I2C address of your PCA9685; eg: 64" line362="     * @param servoNum The number (1-16) of the servo to move" line363="     * @param degrees The degrees (0-180) to move the servo to" line364="     */" line365="    //% block" line366="    export function setServoPosition(servoNum: ServoNum = 1, degrees: number, chipAddress: number = 0x40): void {" line367="        const chip2 = getChipConfig(chipAddress)" line368="        servoNum = Math.max(1, Math.min(16, servoNum))" line369="        degrees = Math.max(0, Math.min(180, degrees))" line370="        const servo: ServoConfig = chip2.servos[servoNum - 1]" line371="        const pwm2 = degrees180ToPWM(chip2.freq, degrees, servo.minOffset, servo.maxOffset)" line372="        servo.position = degrees" line373="        debug(`setServoPosition(${servoNum}, ${degrees}, ${chipAddress})`)" line374="        debug(`  servo.pinNumber ${servo.pinNumber}`)" line375="        debug(`  servo.minOffset ${servo.minOffset}`)" line376="        debug(`  servo.maxOffset ${servo.maxOffset}`)" line377="        debug(`  pwm ${pwm2}`)" line378="        servo.debug()" line379="        return setPinPulseRange(servo.pinNumber, 0, pwm2, chipAddress)" line380="    }" line381="" line382="    /**" line383="     * Used to set the rotation speed of a continous rotation servo from -100% to 100%" line384="     * @param chipAddress [64-125] The I2C address of your PCA9685; eg: 64" line385="     * @param servoNum The number (1-16) of the servo to move" line386="     * @param speed [-100-100] The speed (-100-100) to turn the servo at" line387="     */" line388="    //% block" line389="    export function setCRServoPosition(servoNum: ServoNum = 1, speed: number, chipAddress: number = 0x40): void {" line390="        debug(`setCRServoPosition(${servoNum}, ${speed}, ${chipAddress})`)" line391="        const chip3 = getChipConfig(chipAddress)" line392="        const freq = chip3.freq" line393="        servoNum = Math.max(1, Math.min(16, servoNum))" line394="        const servo2: ServoConfig = chip3.servos[servoNum - 1]" line395="        const offsetStart = calcFreqOffset(freq, servo2.minOffset)" line396="        const offsetMid = calcFreqOffset(freq, servo2.midOffset)" line397="        const offsetEnd = calcFreqOffset(freq, servo2.maxOffset)" line398="        if (speed === 0) {" line399="            return setPinPulseRange(servo2.pinNumber, 0, offsetMid, chipAddress)" line400="        }" line401="        const isReverse: boolean = speed &lt; 0" line402="        debug(isReverse ? 'Reverse' : 'Forward')" line403="        const spread2 = isReverse ? offsetMid - offsetStart : offsetEnd - offsetMid" line404="        debug(`Spread ${spread2}`)" line405="        servo2.position = speed" line406="        speed = Math.abs(speed)" line407="        const calcOffset2: number = ((speed * spread2) / 100)" line408="        debug(`Offset ${calcOffset2}`)" line409="        debug(`min ${offsetStart}`)" line410="        debug(`mid ${offsetMid}`)" line411="        debug(`max ${offsetEnd}`)" line412="        const pwm3 = isReverse ? offsetMid - calcOffset2 : offsetMid + calcOffset2" line413="        debug(`pwm ${pwm3}`)" line414="        return setPinPulseRange(servo2.pinNumber, 0, pwm3, chipAddress)" line415="    }" line416="" line417="    /**" line418="     * Used to set the range in centiseconds (milliseconds * 10) for the pulse width to control the connected servo" line419="     * @param chipAddress [64-125] The I2C address of your PCA9685; eg: 64" line420="     * @param servoNum The number (1-16) of the servo to move; eg: 1" line421="     * @param minTimeCs The minimum centiseconds (0-1000) to turn the servo on; eg: 5" line422="     * @param maxTimeCs The maximum centiseconds (0-1000) to leave the servo on for; eg: 25" line423="     * @param midTimeCs The mid (90 degree for regular or off position if continuous rotation) for the servo; eg: 15" line424="     */" line425="    //% block advanced=true" line426="    export function setServoLimits(servoNum: ServoNum = 1, minTimeCs: number = 5, maxTimeCs: number = 2.5, midTimeCs: number = -1, chipAddress: number = 0x40): void {" line427="        const chip4 = getChipConfig(chipAddress)" line428="        servoNum = Math.max(1, Math.min(16, servoNum))" line429="        minTimeCs = Math.max(0, minTimeCs)" line430="        maxTimeCs = Math.max(0, maxTimeCs)" line431="        debug(`setServoLimits(${servoNum}, ${minTimeCs}, ${maxTimeCs}, ${chipAddress})`)" line432="        const servo3: ServoConfig = chip4.servos[servoNum - 1]" line433="        midTimeCs = midTimeCs &gt; -1 ? midTimeCs : ((maxTimeCs - minTimeCs) / 2) + minTimeCs" line434="        debug(`midTimeCs ${midTimeCs}`)" line435="        return servo3.setOffsetsFromFreq(minTimeCs, maxTimeCs, midTimeCs)" line436="    }" line437="" line438="    /**" line439="     * Used to setup the chip, will cause the chip to do a full reset and turn off all outputs." line440="     * @param chipAddress [64-125] The I2C address of your PCA9685; eg: 64" line441="     * @param freq [40-1000] Frequency (40-1000) in hertz to run the clock cycle at; eg: 50" line442="     */" line443="    //% block advanced=true" line444="    export function init(chipAddress: number = 0x40, newFreq: number = 50) {" line445="        debug(`Init chip at address ${chipAddress} to ${newFreq}Hz`)" line446="        const buf = pins.createBuffer(2)" line447="        const freq2 = (newFreq &gt; 1000 ? 1000 : (newFreq &lt; 40 ? 40 : newFreq))" line448="        const prescaler = calcFreqPrescaler(freq2)" line449="" line450="        write(chipAddress, modeRegister1, sleep)" line451="" line452="        write(chipAddress, PrescaleReg, prescaler)" line453="" line454="        write(chipAddress, allChannelsOnStepLowByte, 0x00)" line455="        write(chipAddress, allChannelsOnStepHighByte, 0x00)" line456="        write(chipAddress, allChannelsOffStepLowByte, 0x00)" line457="        write(chipAddress, allChannelsOffStepHighByte, 0x00)" line458="" line459="        write(chipAddress, modeRegister1, wake)" line460="" line461="        control.waitMicros(1000)" line462="        write(chipAddress, modeRegister1, restart)" line463="    }" line464="" line465="    /**" line466="     * Used to reset the chip, will cause the chip to do a full reset and turn off all outputs." line467="     * @param chipAddress [64-125] The I2C address of your PCA9685; eg: 64" line468="     */" line469="    //% block" line470="    export function reset(chipAddress: number = 0x40): void {" line471="        return init(chipAddress, getChipConfig(chipAddress).freq);" line472="    }" line473="" line474="    /**" line475="     * Used to reset the chip, will cause the chip to do a full reset and turn off all outputs." line476="     * @param hexAddress The hex address to convert to decimal; eg: 0x40" line477="     */" line478="    //% block" line479="    export function chipAddress(hexAddress: string): number {" line480="        hexAddress = stripHexPrefix(hexAddress)" line481="        let dec = 0" line482="        let lastidx = 0" line483="        let lastchar = 0" line484="        const l = Math.min(2, hexAddress.length)" line485="        for (let k = 0; k &lt; l; k++) {" line486="            const char = hexAddress.charAt(k)" line487="            const idx = hexChars.indexOf(char)" line488="            const pos = l - k - 1" line489="            lastidx = pos" line490="            dec = dec + (idx * Math.pow(16, pos))" line491="        }" line492="        return dec" line493="    }" line494="" line495="    export function setDebug(debugEnabled: boolean): void {" line496="        _DEBUG = debugEnabled" line497="    }" line498="}" numlines="499"></mutation></block></statement></block></xml>